import streamlit as st
import sys
import os
import bcrypt
from backend.database import create_user, get_user_by_username, verify_password
import re

# Add parent directory to path to import from backend
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def render_auth_view():
    """Render the authentication view with login and registration forms."""
    st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    # Create tabs for login and registration
    login_tab, register_tab = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with login_tab:
        render_login()
    
    with register_tab:
        render_register()

def render_login():
    """Render the login form."""
    with st.form("login_form"):
        st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if submitted:
            if not username or not password:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
            
            # Authenticate user
            user = get_user_by_username(username)
            
            if not user:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not verify_password(password, user.get('password_hash', '')):
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                return
            
            # Set session state for authenticated user
            st.session_state.user_id = user['id']
            st.session_state.username = username
            
            st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            st.rerun()

def render_register():
    """Render the registration form."""
    with st.form("registration_form"):
        st.subheader("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        email = st.text_input("Email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
        
        submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        if submitted:
            # Validate inputs
            if not username or not email or not password or not confirm_password:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
            
            # Validate username (alphanumeric, 3-20 chars)
            if not re.match(r'^[a-zA-Z0-9_]{3,20}$', username):
                st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è")
                return
            
            # Validate email
            if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
                return
            
            # Validate password (at least 8 chars, with at least one digit and one letter)
            if not re.match(r'^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$', password):
                st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
                return
            
            # Check if passwords match
            if password != confirm_password:
                st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return
            
            # Check if username exists
            existing_user = get_user_by_username(username)
            if existing_user:
                st.error("–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
                return
            
            # Create user
            user_id = create_user(username, email, password)
            
            if user_id:
                # Set session state for authenticated user
                st.session_state.user_id = user_id
                st.session_state.username = username
                
                st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                st.rerun()
            else:
                st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def render_logout():
    """Render the logout button."""
    if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
        for key in ['user_id', 'username', 'current_page']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun() 