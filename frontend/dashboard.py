import streamlit as st
import sys
import os
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import altair as alt
from backend.database import (
    get_user_habits, 
    get_habit_logs,
    add_habit_log,
    delete_habit,
    update_habit_streak,
    get_streak_data,
    update_habit,
    add_user_habit
)

# Add parent directory to path to import from backend
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from backend.database import Database
from backend.ml_engine import HabitRecommender
from backend.utils import display_streak_icon, validate_time_format, format_time_string


def render_dashboard():
    """Render the main dashboard for tracking habits."""
    st.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏")
    
    # Check if user is logged in
    if 'user_id' not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    # Welcome message with username
    st.write(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state.username}! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏.")
    
    # Get user habits
    user_id = st.session_state.user_id
    habits = get_user_habits(user_id)
    
    # Quick Add Habit Section at the top
    st.subheader("üåü –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    
    # Use columns to create a compact form
    col1, col2, col3 = st.columns([3, 2, 1])
    
    with col1:
        new_habit_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏", key="quick_add_name")
    
    with col2:
        new_habit_category = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            options=["–ó–¥–æ—Ä–æ–≤—å–µ", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–î—Ä—É–≥–æ–µ"],
            key="quick_add_category"
        )
    
    with col3:
        if st.button("–î–æ–±–∞–≤–∏—Ç—å", key="quick_add_btn"):
            if new_habit_name:
                # Add new habit with minimal details
                add_user_habit(
                    user_id=user_id,
                    name=new_habit_name,
                    description=f"–ü—Ä–∏–≤—ã—á–∫–∞: {new_habit_name}",
                    category=new_habit_category,
                    time_required="5 –º–∏–Ω—É—Ç",
                    difficulty="–°—Ä–µ–¥–Ω–µ",
                    selected_time="08:00"
                )
                st.success(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{new_habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    
    # Quick Recommendations Section
    st.subheader("üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    
    # Create a list of sample recommended habits
    recommended_habits = [
        {
            "name": "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞",
            "category": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            "description": "5-–º–∏–Ω—É—Ç–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"
        },
        {
            "name": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
            "category": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            "description": "10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞"
        },
        {
            "name": "–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º",
            "category": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            "description": "–í—ã–ø–∏–≤–∞—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"
        },
        {
            "name": "–ß—Ç–µ–Ω–∏–µ",
            "category": "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
            "description": "–ß–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"
        }
    ]
    
    # Check which habits the user already has
    current_habit_names = [h['name'].lower() for h in habits] if habits else []
    
    # Filter recommendations to only show new ones
    filtered_recommendations = [h for h in recommended_habits 
                             if h["name"].lower() not in current_habit_names]
    
    if filtered_recommendations:
        # Display recommendations in a horizontal layout
        cols = st.columns(min(4, len(filtered_recommendations)))
        
        for i, habit in enumerate(filtered_recommendations[:4]):  # Show up to 4 recommendations
            with cols[i]:
                st.markdown(f"**{habit['name']}**")
                st.caption(f"{habit['category']}")
                
                if st.button("–î–æ–±–∞–≤–∏—Ç—å ‚ûï", key=f"rec_{i}"):
                    add_user_habit(
                        user_id=user_id,
                        name=habit['name'],
                        description=habit['description'],
                        category=habit['category'],
                        time_required="5 –º–∏–Ω—É—Ç",
                        difficulty="–°—Ä–µ–¥–Ω–µ",
                        selected_time="08:00"
                    )
                    st.success(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()
    else:
        st.info("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏!")
    
    st.markdown("---")
    
    # If no habits, show a message
    if not habits:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º—ã –≤—ã—à–µ.")
        return
    
    # Tabs for different sections
    habit_track_tab, progress_tab, statistics_tab, manage_tab = st.tabs(["–¢—Ä–µ–∫–µ—Ä", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])
    
    with habit_track_tab:
        render_habit_tracker(habits, user_id)
    
    with progress_tab:
        render_progress_view(habits, user_id)
    
    with statistics_tab:
        render_statistics_view(habits, user_id)
        
    with manage_tab:
        render_manage_habits(habits, user_id)

def render_habit_tracker(habits, user_id):
    """Render the habit tracking interface."""
    st.subheader("üìù –¢—Ä–µ–∫–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫")
    st.write("–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è:")
    
    # Get today's date
    today = datetime.now().date()
    
    # Display each habit with checkbox
    for habit in habits:
        habit_id = habit['id']
        habit_name = habit['name']
        
        # Check if habit was already logged today
        logs = get_habit_logs(user_id, habit_id, today)
        is_logged = len(logs) > 0
        
        # Create a unique key for each checkbox
        key = f"habit_{habit_id}_{today}"
        
        col1, col2 = st.columns([4, 1])
        with col1:
            checked = st.checkbox(
                habit_name,
                value=is_logged,
                key=key
            )
        
        # If checkbox state changed
        if checked != is_logged:
            if checked:
                # Log the habit
                add_habit_log(user_id, habit_id, today, completed=True)
                st.success(f"‚úÖ {habit_name} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
            else:
                # Remove log for that habit and day
                # Note: Not implemented in this example
                st.info(f"‚ùå {habit_name} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")

def render_progress_view(habits, user_id):
    """Render the progress tracking view."""
    st.subheader("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
    
    # Calculate date range (last 7 days)
    end_date = datetime.now().date()
    start_date = end_date - timedelta(days=6)
    
    # Get streak data
    streak_data = {}
    for habit in habits:
        habit_id = habit['id']
        streak_info = get_streak_data(user_id, habit_id)
        streak_data[habit['name']] = streak_info
    
    # Create a streak overview
    st.write("### –¢–µ–∫—É—â–∏–µ —Å–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if streak_data:
        streak_df = pd.DataFrame({
            '–ü—Ä–∏–≤—ã—á–∫–∞': list(streak_data.keys()),
            '–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è': [data['current_streak'] for data in streak_data.values()],
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è': [data['max_streak'] for data in streak_data.values()]
        })
        
        st.dataframe(streak_df, hide_index=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–∏—è—Ö. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏!")
    
    # Show calendar heatmap or similar visualization
    st.write("### –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    st.info("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
    
    # Placeholder for calendar visualization
    # In a real app, you would create a heatmap or calendar view here

def render_statistics_view(habits, user_id):
    """Render statistics and analytics view."""
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if not habits:
        st.info("–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    # Calculate overall completion rate
    completion_data = {}
    
    # Get last 30 days of data
    end_date = datetime.now().date()
    start_date = end_date - timedelta(days=29)
    
    for habit in habits:
        habit_id = habit['id']
        logs = get_habit_logs(user_id, habit_id, start_date=start_date, end_date=end_date)
        
        # Count logged days
        logged_days = len(logs)
        total_days = (end_date - start_date).days + 1
        
        # Calculate completion rate
        completion_rate = (logged_days / total_days) * 100
        completion_data[habit['name']] = completion_rate
    
    if completion_data:
        # Create dataframe for visualization
        df = pd.DataFrame({
            '–ü—Ä–∏–≤—ã—á–∫–∞': list(completion_data.keys()),
            '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': list(completion_data.values())
        })
        
        # Create bar chart for completion rates
        fig = px.bar(
            df,
            x='–ü—Ä–∏–≤—ã—á–∫–∞',
            y='–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            title='–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π',
            labels={'–ü—Ä–∏–≤—ã—á–∫–∞': '–ü—Ä–∏–≤—ã—á–∫–∞', '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (%)'},
            color='–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            color_continuous_scale=px.colors.sequential.Viridis
        )
        fig.update_layout(xaxis_tickangle=-45)
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

def render_manage_habits(habits, user_id):
    """Render interface for managing habits."""
    st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏")
    
    # Add Detailed Habit form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏"):
        with st.form("detailed_habit_form"):
            # Form inputs
            habit_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏", max_chars=50)
            habit_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ (—Ü–µ–ª—å –∏ –ø–æ–ª—å–∑–∞)", max_chars=200)
            habit_category = st.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                options=["–ó–¥–æ—Ä–æ–≤—å–µ", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–î—Ä—É–≥–æ–µ"]
            )
            habit_time_required = st.selectbox(
                "–¢—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è",
                options=["5 –º–∏–Ω—É—Ç", "10-15 –º–∏–Ω—É—Ç", "15-30 –º–∏–Ω—É—Ç", "30-60 –º–∏–Ω—É—Ç"]
            )
            habit_difficulty = st.selectbox(
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏",
                options=["–õ–µ–≥–∫–æ", "–°—Ä–µ–¥–Ω–µ", "–°–ª–æ–∂–Ω–æ"]
            )
            habit_selected_time = st.time_input("–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", value=datetime.strptime("08:00", "%H:%M").time())
            
            # Submit button
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
            
            if submitted:
                if not habit_name:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏.")
                else:
                    # Add the habit to the database
                    add_user_habit(
                        user_id=user_id,
                        name=habit_name,
                        description=habit_description,
                        category=habit_category,
                        time_required=habit_time_required,
                        difficulty=habit_difficulty,
                        selected_time=habit_selected_time.strftime("%H:%M")
                    )
                    st.success(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()
    
    # Display all habits with edit/delete options
    for habit in habits:
        with st.expander(f"{habit['name']} ({habit.get('category', '–û–±—â–µ–µ')})"):
            # Create a form for editing the habit
            with st.form(key=f"edit_form_{habit['id']}"):
                # Habit name
                new_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏",
                    value=habit['name'],
                    key=f"edit_name_{habit['id']}"
                )
                
                # Category (if available)
                category = habit.get('category', '–û–±—â–µ–µ')
                st.text_input(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    value=category,
                    disabled=True,
                    key=f"edit_category_{habit['id']}"
                )
                
                # Description
                description = habit.get('description', '')
                new_description = st.text_area(
                    "–û–ø–∏—Å–∞–Ω–∏–µ",
                    value=description,
                    key=f"edit_desc_{habit['id']}"
                )
                
                # Time required
                time_required = habit.get('time_required', '5 –º–∏–Ω—É—Ç')
                new_time_required = st.selectbox(
                    "–¢—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è",
                    ["5 –º–∏–Ω—É—Ç", "10-15 –º–∏–Ω—É—Ç", "15-30 –º–∏–Ω—É—Ç", "30-60 –º–∏–Ω—É—Ç"],
                    index=["5 –º–∏–Ω—É—Ç", "10-15 –º–∏–Ω—É—Ç", "15-30 –º–∏–Ω—É—Ç", "30-60 –º–∏–Ω—É—Ç"].index(time_required)
                    if time_required in ["5 –º–∏–Ω—É—Ç", "10-15 –º–∏–Ω—É—Ç", "15-30 –º–∏–Ω—É—Ç", "30-60 –º–∏–Ω—É—Ç"]
                    else 0,
                    key=f"edit_time_req_{habit['id']}"
                )
                
                # Difficulty
                difficulty = habit.get('difficulty', '–°—Ä–µ–¥–Ω–µ')
                new_difficulty = st.selectbox(
                    "–°–ª–æ–∂–Ω–æ—Å—Ç—å",
                    ["–õ–µ–≥–∫–æ", "–°—Ä–µ–¥–Ω–µ", "–°–ª–æ–∂–Ω–æ"],
                    index=["–õ–µ–≥–∫–æ", "–°—Ä–µ–¥–Ω–µ", "–°–ª–æ–∂–Ω–æ"].index(difficulty)
                    if difficulty in ["–õ–µ–≥–∫–æ", "–°—Ä–µ–¥–Ω–µ", "–°–ª–æ–∂–Ω–æ"]
                    else 0,
                    key=f"edit_diff_{habit['id']}"
                )
                
                # Selected time
                selected_time = habit.get('selected_time', '08:00')
                new_selected_time = st.text_input(
                    "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú)",
                    value=selected_time,
                    key=f"edit_time_{habit['id']}"
                )
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # Save button
                    save_changes = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                
                if save_changes:
                    # Validate time format
                    if not validate_time_format(new_selected_time):
                        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
                    else:
                        # Update habit in database
                        update_habit(
                            habit['id'],
                            new_name,
                            new_description,
                            new_time_required,
                            new_difficulty,
                            new_selected_time
                        )
                        st.success("–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                        st.rerun()
            
            # Delete button (outside the form)
            if st.button("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", key=f"delete_{habit['id']}"):
                # Confirm deletion
                st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("–î–∞, —É–¥–∞–ª–∏—Ç—å", key=f"confirm_delete_{habit['id']}"):
                        # Delete habit from database
                        delete_habit(habit['id'])
                        st.success("–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                        st.rerun()
                
                with col2:
                    if st.button("–û—Ç–º–µ–Ω–∞", key=f"cancel_delete_{habit['id']}"):
                        st.rerun() 