import uuid
import re
from datetime import datetime
import pandas as pd
import streamlit as st

def generate_user_id():
    """Generate a unique user ID."""
    return str(uuid.uuid4())

def validate_email(email):
    """Validate email format."""
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return bool(re.match(pattern, email))

def validate_time_format(time_str):
    """Validate time format (HH:MM)."""
    pattern = r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$'
    return bool(re.match(pattern, time_str))

def format_time_string(time_str):
    """Format time string to HH:MM format."""
    try:
        time_obj = datetime.strptime(time_str, '%H:%M').time()
        return time_obj.strftime('%H:%M')
    except ValueError:
        return None

def load_dataset(file_path):
    """Load and return a dataset from CSV."""
    try:
        return pd.read_csv(file_path)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def get_age_ranges():
    """Return standard age ranges for the application."""
    return ['18-25', '26-35', '36-45', '45+']

def get_gender_options():
    """Return standard gender options for the application."""
    return ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–î—Ä—É–≥–æ–µ', '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å']

def get_time_commitment_options():
    """Return standard time commitment options."""
    return ['5 –º–∏–Ω—É—Ç', '15 –º–∏–Ω—É—Ç', '30 –º–∏–Ω—É—Ç', '1 —á–∞—Å']

def get_preferred_time_options():
    """Return standard preferred time options."""
    return ['–£—Ç—Ä–æ', '–î–µ–Ω—å', '–í–µ—á–µ—Ä', '–ù–µ –≤–∞–∂–Ω–æ']

def get_existing_habits_options():
    """Return common existing habits options."""
    return [
        '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        '–ß—Ç–µ–Ω–∏–µ',
        '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
        '–†–∞–Ω–Ω–∏–π –ø–æ–¥—ä–µ–º',
        '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
        '–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞',
        '–≠–∫–æ–Ω–æ–º–∏—è –¥–µ–Ω–µ–≥',
        '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞'
    ]

def get_improvement_areas_options():
    """Return standard improvement areas options."""
    return [
        '–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
        '–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
        '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–§–∏–Ω–∞–Ω—Å—ã',
        '–û—Ç–Ω–æ—à–µ–Ω–∏—è'
    ]

def get_barriers_options():
    """Return standard barriers options."""
    return [
        '–ù–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏',
        '–ù–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
        '–ù–µ–ø–æ–Ω—è—Ç–Ω–æ —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å',
        '–°—Ç—Ä–∞—Ö –Ω–µ—É–¥–∞—á–∏',
        '–ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        '–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ'
    ]

def display_streak_icon(streak):
    """Display a streak icon and count."""
    if streak == 0:
        return "üîÑ –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é —Å–µ—Ä–∏—é!"
    elif streak < 3:
        return f"üî• {streak} –¥–Ω. –ø–æ–¥—Ä—è–¥"
    elif streak < 7:
        return f"üî•üî• {streak} –¥–Ω. –ø–æ–¥—Ä—è–¥"
    else:
        return f"üî•üî•üî• {streak} –¥–Ω. –ø–æ–¥—Ä—è–¥"

def convert_time_to_minutes(time_str):
    """Convert a time string (like '30 minutes') to minutes as an integer."""
    if not time_str:
        return 0
    
    match = re.search(r'(\d+)', time_str)
    if match:
        return int(match.group(1))
    return 0 