import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
from backend.database import (
    get_user_habits,
    add_habit_log,
    get_habit_logs,
    get_streak_data
)
from backend.utils import display_streak_icon

def render_tracker():
    """Render the habit tracking interface."""
    st.title("üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫")
    
    # Check if user is logged in
    if 'user_id' not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É.")
        return
    
    # Get user habits
    user_id = st.session_state.user_id
    habits = get_user_habits(user_id)
    
    if not habits:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.")
        return
    
    # Welcome message with username
    st.write(f"–ü—Ä–∏–≤–µ—Ç, {st.session_state.username}! –û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è.")
    
    # Get today's date
    today = datetime.now().date()
    
    # Create habit tracking area
    st.subheader("–¢—Ä–µ–∫–µ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    st.write(f"–î–∞—Ç–∞: {today.strftime('%d.%m.%Y')}")
    
    # Create columns for better layout
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Display each habit with checkbox and streak information
        for habit in habits:
            habit_id = habit['id']
            habit_name = habit['name']
            
            # Get streak information
            streak_info = get_streak_data(user_id, habit_id)
            streak_text = display_streak_icon(streak_info['current_streak'])
            
            # Check if habit was already logged today
            logs = get_habit_logs(user_id, habit_id, today)
            is_logged = len(logs) > 0
            
            # Create container for each habit
            with st.container():
                habit_col1, habit_col2 = st.columns([4, 1])
                
                with habit_col1:
                    # Create a unique key for each checkbox
                    key = f"tracker_habit_{habit_id}_{today}"
                    checked = st.checkbox(
                        f"{habit_name} {streak_text}",
                        value=is_logged,
                        key=key
                    )
                
                # If checkbox state changed
                if checked != is_logged:
                    if checked:
                        # Log the habit
                        add_habit_log(user_id, habit_id, today, completed=True)
                        st.success(f"‚úÖ {habit_name} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
                    else:
                        # Remove log for that habit and day (implementation would depend on database structure)
                        st.info(f"‚ùå {habit_name} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
                    
                    # Force refresh for updated streak information
                    st.rerun()
    
    with col2:
        # Display weekly overview
        st.subheader("–ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä")
        
        # Calculate date range (last 7 days)
        end_date = today
        start_date = end_date - timedelta(days=6)
        date_range = [(start_date + timedelta(days=i)).strftime("%d.%m") for i in range(7)]
        
        # Create a dataframe with completion status for each habit for each day
        completion_data = []
        
        for habit in habits:
            habit_id = habit['id']
            habit_name = habit['name']
            
            row_data = {'–ü—Ä–∏–≤—ã—á–∫–∞': habit_name}
            
            for i, date_str in enumerate(date_range):
                date = start_date + timedelta(days=i)
                logs = get_habit_logs(user_id, habit_id, date)
                row_data[date_str] = "‚úÖ" if logs else "‚¨ú"
            
            completion_data.append(row_data)
        
        # Create dataframe and display as table
        if completion_data:
            df = pd.DataFrame(completion_data)
            st.dataframe(df, hide_index=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    # Visualization section
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    
    # Calculate completion rates for each habit
    completion_rates = {}
    
    for habit in habits:
        habit_id = habit['id']
        
        # Get logs for last 30 days
        thirty_days_ago = today - timedelta(days=29)
        logs = get_habit_logs(user_id, habit_id, start_date=thirty_days_ago, end_date=today)
        
        # Calculate completion rate
        completion_rate = (len(logs) / 30) * 100
        completion_rates[habit['name']] = completion_rate
    
    # Create bar chart for visualization
    if completion_rates:
        df = pd.DataFrame({
            '–ü—Ä–∏–≤—ã—á–∫–∞': list(completion_rates.keys()),
            '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': list(completion_rates.values())
        })
        
        fig = px.bar(
            df,
            x='–ü—Ä–∏–≤—ã—á–∫–∞', 
            y='–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            title='–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π',
            color='–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            color_continuous_scale=px.colors.sequential.Viridis
        )
        
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
        
    # Motivational section
    st.subheader("–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")
    
    # Calculate average completion rate
    avg_completion = sum(completion_rates.values()) / len(completion_rates) if completion_rates else 0
    
    if avg_completion >= 80:
        st.success("üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
    elif avg_completion >= 50:
        st.info("üëç –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫.")
    else:
        st.warning("üí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É.")
        
    st.write("""
    ### –°–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫:
    
    1. **–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–æ–≥–æ** - –¥–µ–ª–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    2. **–ë—É–¥—å—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã** - —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    3. **–û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏** - –ø—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫ —Ç–æ–º—É, —á—Ç–æ –≤—ã —É–∂–µ –¥–µ–ª–∞–µ—Ç–µ
    4. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –≤–∏–¥–Ω–æ–º –º–µ—Å—Ç–µ
    5. **–û—Ç–º–µ—á–∞–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏** - –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã
    """) 